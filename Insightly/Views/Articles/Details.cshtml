@model Article
@using System.Security.Claims

@{
    ViewData["Title"] = Model.Title;
    var currentUserId = User.Identity != null && User.Identity.IsAuthenticated
                        ? User.FindFirstValue(ClaimTypes.NameIdentifier)
                        : "";
}

<div class="details-page py-4">
    <div class="post-card mb-4">
        <div class="p-4">
            <div class="d-flex justify-content-between align-items-start mb-2">
                <div>
                    <div class="post-meta small mb-1">
                        <span class="chip me-2">Article</span>
                        Posted by <strong>@Model.Author.Name</strong> • @Model.CreatedAt.ToString("dd MMM yyyy")
                    </div>
                    <h2 class="mb-0">@Model.Title</h2>
                </div>
                @if (User.Identity != null && User.Identity.IsAuthenticated)
                {
                    <div>
                        @if (User.IsInRole("Admin"))
                        {
                            <a asp-action="Edit" asp-route-id="@Model.ArticleId" class="btn btn-outline-secondary me-2" title="Edit"><i class="bi bi-pencil"></i></a>
                            <a asp-action="Delete" asp-route-id="@Model.ArticleId" class="btn btn-outline-danger" title="Delete"><i class="bi bi-trash"></i></a>
                        }
                        else if (Model.AuthorId == User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value)
                        {
                            <a asp-action="Edit" asp-route-id="@Model.ArticleId" class="btn btn-outline-secondary me-2" title="Edit"><i class="bi bi-pencil"></i></a>
                            <a asp-action="Delete" asp-route-id="@Model.ArticleId" class="btn btn-outline-danger" title="Delete"><i class="bi bi-trash"></i></a>
                        }
                    </div>
                }
            </div>
            <div class="mt-3 post-content">
                <p class="mb-0">@Model.Content</p>
            </div>

            <hr class="my-3 action-sep" />
            <div class="post-actions d-flex align-items-center flex-wrap mt-2">
                <div class="action-vote pill d-inline-flex align-items-center me-2">
                    <form asp-controller="Votes" asp-action="Vote" method="post" class="d-inline">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="articleId" value="@Model.ArticleId" />
                        <input type="hidden" name="isUpvote" value="true" />
                        <button type="submit" class="action-btn btn-icon" aria-label="Upvote"><i class="bi bi-arrow-up"></i></button>
                    </form>
                    <span class="score mx-1" id="ab-score">@ViewBag.NetScore</span>
                    <form asp-controller="Votes" asp-action="Vote" method="post" class="d-inline">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="articleId" value="@Model.ArticleId" />
                        <input type="hidden" name="isUpvote" value="false" />
                        <button type="submit" class="action-btn btn-icon" aria-label="Downvote"><i class="bi bi-arrow-down"></i></button>
                    </form>
                </div>
                <a href="#comments" class="action-btn pill comment" id="btn-scroll-comments" aria-label="Comments"><i class="bi bi-chat"></i><span id="comments-count-top">@ViewBag.CommentsCount</span></a>
                <button class="action-btn pill" id="btn-share" type="button" aria-label="Share"><i class="bi bi-share"></i><span class="d-none d-sm-inline ms-1">Share</span></button>
                @if (User.Identity != null && User.Identity.IsAuthenticated)
                {
                    <form asp-controller="Articles" asp-action="MarkAsRead" asp-route-id="@Model.ArticleId" method="post" class="d-inline">
                        @Html.AntiForgeryToken()
                        <button type="submit" class="action-btn pill btn-icon @(ViewBag.IsRead == true ? "is-on" : "")" title="Mark as read" @(ViewBag.IsRead == true ? "disabled" : "")>
                            <i class="bi @(ViewBag.IsRead == true ? "bi-check2-circle" : "bi-journal-bookmark")"></i>
                            <span class="d-none d-sm-inline ms-1">Read</span>
                        </button>
                    </form>
                }
            </div>
        </div>
    </div>

    <div class="post-card p-3 mb-4" id="comments">
        <h5 class="mb-3">Comments (<span id="comments-count">@ViewBag.CommentsCount</span>)</h5>
        @if (User.Identity != null && User.Identity.IsAuthenticated)
        {
            <form asp-controller="Comments" asp-action="Add" method="post" class="mb-3">
                @Html.AntiForgeryToken()
                <input type="hidden" name="articleId" value="@Model.ArticleId" />
                <div class="comment-composer">
                    <textarea name="content" id="comment-content" class="form-control composer-input collapsed" rows="3" placeholder="Join the conversation." required></textarea>
                    <div class="composer-actions">
                        <button type="submit" class="btn btn-sm btn-danger rounded-pill">Comment</button>
                    </div>
                </div>
            </form>
        }
        else
        {
            <div class="mb-3">
                <a href="/Identity/Account/Login">Login</a> to add a comment.
            </div>
        }
        <ul class="list-group list-group-flush" id="comments-list">
            @foreach (var comment in Model.Comments.OrderByDescending(c => c.CreatedAt))
            {
                <li class="list-group-item comment-item" data-comment-id="@comment.CommentId" data-author-id="@comment.AuthorId">
                    <div class="d-flex align-items-center gap-2 mb-1 text-muted small">
                        <strong class="text-dark">@comment.Author.Name</strong>
                        <span>•</span>
                        @if (comment.UpdatedAt.HasValue)
                        {
                            <span>updated on @comment.UpdatedAt.Value.ToString("dd MMM yyyy HH:mm")</span>
                        }
                        else
                        {
                            <span>@comment.CreatedAt.ToString("dd MMM yyyy HH:mm")</span>
                        }
                    </div>
                    <p class="comment-content mb-0">@comment.Content</p>
                    @if (!string.IsNullOrEmpty(currentUserId) && comment.AuthorId == currentUserId)
                    {
                        <div class="mt-2 comment-controls d-flex align-items-center gap-2">
                            <details>
                                <summary class="btn btn-sm btn-outline-secondary">Edit</summary>
                                <div class="mt-2">
                                    <form asp-controller="Comments" asp-action="Edit" method="post" class="d-flex flex-column gap-2">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="commentId" value="@comment.CommentId" />
                                        <textarea name="content" class="form-control" rows="3" required>@comment.Content</textarea>
                                        <div>
                                            <button type="submit" class="btn btn-sm btn-primary">Save</button>
                                        </div>
                                    </form>
                                </div>
                            </details>
                            <form asp-controller="Comments" asp-action="Delete" method="post" onsubmit="return confirm('Are you sure you want to delete this comment?');">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="commentId" value="@comment.CommentId" />
                                <button type="submit" class="btn btn-sm btn-outline-danger">Delete</button>
                            </form>
                        </div>
                    }
                </li>
            }
        </ul>
    </div>

    
</div>

@section Scripts {
    <script>
        function showToast(message) {
            const c = document.getElementById('toasts'); if (!c) { alert(message); return; }
            const el = document.createElement('div'); el.className = 'toast align-items-center text-bg-dark border-0'; el.role = 'status'; el.ariaLive = 'polite'; el.ariaAtomic = 'true';
            el.innerHTML = `<div class="d-flex"><div class="toast-body">${message}</div><button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button></div>`;
            c.appendChild(el); try { const t = new bootstrap.Toast(el, { delay: 2000 }); t.show(); el.addEventListener('hidden.bs.toast', () => el.remove()); } catch (e) { }
        }
        async function shareLink() {
            const url = window.location.href; const title = document.title;
            if (navigator.share) { try { await navigator.share({ title, url }); return; } catch (e) {} }
            try { await navigator.clipboard.writeText(url); showToast('Link copied to clipboard'); } catch (e) { alert(url); }
        }
        document.addEventListener('DOMContentLoaded', function () {
            var shareBtn = document.getElementById('btn-share'); if (shareBtn) shareBtn.addEventListener('click', shareLink);
            var scrollBtn = document.getElementById('btn-scroll-comments'); if (scrollBtn) scrollBtn.addEventListener('click', function (e) {
                e.preventDefault(); var target = document.getElementById('comments');
                if (target && target.scrollIntoView) target.scrollIntoView({ behavior: 'smooth', block: 'start' });
            });

            // Minimal composer UX: expand on focus/typing, collapse when empty + blur
            var composerInput = document.getElementById('comment-content');
            var composerActions = document.querySelector('.composer-actions');
            function expandComposer() {
                if (!composerInput) return;
                composerInput.classList.remove('collapsed');
                composerInput.classList.add('expanded');
                if (composerActions) composerActions.classList.add('show');
            }
            function collapseComposer() {
                if (!composerInput) return;
                if ((composerInput.value || '').trim().length > 0) return;
                composerInput.classList.add('collapsed');
                composerInput.classList.remove('expanded');
                if (composerActions) composerActions.classList.remove('show');
            }
            if (composerInput) composerInput.addEventListener('focus', expandComposer);
            if (composerInput) composerInput.addEventListener('input', function () {
                if ((composerInput.value || '').trim().length > 0) { expandComposer(); }
            });
            if (composerInput) composerInput.addEventListener('blur', function () { setTimeout(collapseComposer, 100); });
        });
    </script>
}
