@{
    ViewData["Title"] = "Chat";
}

<style>
    body {
        background: #f8f9fa;
    }

    .chat-container {
        max-width: 900px;
        margin: 40px auto;
        background: white;
        border-radius: 8px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.08);
        overflow: hidden;
        height: calc(100vh - 180px);
        display: flex;
        flex-direction: column;
    }

    .chat-header {
        background: white;
        color: #333;
        padding: 20px 28px;
        display: flex;
        align-items: center;
        gap: 14px;
        border-bottom: 1px solid #e9ecef;
    }

    .chat-header .avatar {
        width: 44px;
        height: 44px;
        border-radius: 50%;
        background: #ff4444;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 600;
        color: white;
        font-size: 18px;
    }

    .chat-header .user-info h3 {
        margin: 0;
        font-size: 17px;
        font-weight: 600;
        color: #2c3e50;
    }

    .chat-header .user-info p {
        margin: 4px 0 0 0;
        font-size: 13px;
        color: #95a5a6;
    }

    .online-dot {
        width: 8px;
        height: 8px;
        background: #2ecc71;
        border-radius: 50%;
        display: inline-block;
        margin-right: 6px;
    }

    .messages-container {
        flex: 1;
        min-height: 0;
        overflow-y: auto;
        padding: 24px 28px;
        background: #fafbfc;
        display: flex;
        flex-direction: column;
        gap: 16px;
    }

    .message {
        display: flex;
        align-items: flex-start;
        gap: 10px;
        animation: fadeSlideIn 0.25s ease;
    }

    @@keyframes fadeSlideIn {
        from {
            opacity: 0;
            transform: translateY(8px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .message.sent {
        flex-direction: row-reverse;
    }

    .message .avatar-small {
        width: 36px;
        height: 36px;
        border-radius: 50%;
        background: #3498db;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 15px;
        font-weight: 600;
        flex-shrink: 0;
    }

    .message.sent .avatar-small {
        background: #ff4444;
    }

    .message-content {
        display: flex;
        flex-direction: column;
        max-width: 65%;
    }

    .message.sent .message-content {
        align-items: flex-end;
    }

    .message-bubble {
        padding: 11px 16px;
        border-radius: 8px;
        word-wrap: break-word;
        font-size: 14px;
        line-height: 1.5;
    }

    .message.received .message-bubble {
        background: #f1f3f5;
        color: #2c3e50;
    }

    .message.sent .message-bubble {
        background: #ff4444;
        color: white;
    }

    .message-time {
        font-size: 11px;
        color: #95a5a6;
        margin-top: 5px;
        padding: 0 4px;
    }

    .chat-input-container {
        padding: 20px 28px;
        background: white;
        border-top: 1px solid #e9ecef;
        display: flex;
        gap: 12px;
        align-items: center;
        flex-shrink: 0;
    }

    .chat-input-container input {
        flex: 1;
        border: 1px solid #dfe6e9;
        border-radius: 24px;
        padding: 12px 20px;
        font-size: 14px;
        transition: all 0.2s ease;
        background: #f8f9fa;
    }

    .chat-input-container input:focus {
        outline: none;
        border-color: #ff4444;
        background: white;
        box-shadow: 0 0 0 3px rgba(255, 68, 68, 0.1);
    }

    .chat-input-container input::placeholder {
        color: #b2bec3;
    }

    .send-button {
        width: 46px;
        height: 46px;
        border-radius: 50%;
        background: #ff4444;
        border: none;
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.2s ease;
        flex-shrink: 0;
    }

    .send-button:hover {
        background: #e63939;
        transform: scale(1.05);
    }

    .send-button:active {
        transform: scale(0.95);
    }

    .empty-state {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100%;
        color: #b2bec3;
    }

    .empty-state i {
        font-size: 56px;
        margin-bottom: 16px;
        opacity: 0.4;
    }

    .empty-state p {
        font-size: 15px;
    }

    /* Scrollbar styling */
    .messages-container::-webkit-scrollbar {
        width: 6px;
    }

    .messages-container::-webkit-scrollbar-track {
        background: transparent;
    }

    .messages-container::-webkit-scrollbar-thumb {
        background: #dfe6e9;
        border-radius: 3px;
    }

    .messages-container::-webkit-scrollbar-thumb:hover {
        background: #b2bec3;
    }

    /* Receiver ID Input Page */
    .receiver-input-container {
        max-width: 480px;
        margin: 80px auto;
        text-align: center;
        padding: 48px 40px;
        background: white;
        border-radius: 8px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.08);
    }

    .receiver-input-container i {
        font-size: 52px;
        color: #ff4444;
        margin-bottom: 20px;
    }

    .receiver-input-container h2 {
        margin-bottom: 10px;
        color: #2c3e50;
        font-size: 24px;
        font-weight: 600;
    }

    .receiver-input-container p {
        color: #95a5a6;
        margin-bottom: 32px;
        font-size: 15px;
    }

    .receiver-input-container input {
        width: 100%;
        padding: 14px 18px;
        border: 1px solid #dfe6e9;
        border-radius: 6px;
        font-size: 15px;
        margin-bottom: 16px;
        transition: all 0.2s ease;
        background: #f8f9fa;
    }

    .receiver-input-container input:focus {
        outline: none;
        border-color: #ff4444;
        background: white;
        box-shadow: 0 0 0 3px rgba(255, 68, 68, 0.1);
    }

    .receiver-input-container button {
        width: 100%;
        padding: 14px;
        background: #ff4444;
        color: white;
        border: none;
        border-radius: 6px;
        font-size: 15px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .receiver-input-container button:hover {
        background: #e63939;
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(255, 68, 68, 0.25);
    }

    .receiver-input-container button:active {
        transform: translateY(0);
    }
</style>

@if (ViewBag.ReceiverId == null)
{
    <div class="receiver-input-container">
        <i class="bi bi-chat-dots"></i>
        <h2>Start a Conversation</h2>
        <p>Enter the user ID of the person you want to chat with</p>
        <input type="text" id="receiverIdInput" placeholder="Enter User ID" />
        <button id="goBtn">
            <i class="bi bi-arrow-right me-2"></i>Start Chat
        </button>
    </div>
    <script>
        document.getElementById("goBtn").addEventListener("click", () => {
            const receiverId = document.getElementById("receiverIdInput").value.trim();
            if (receiverId) {
                window.location.href = `/Chat?receiverId=${receiverId}`;
            }
        });
        
        document.getElementById("receiverIdInput").addEventListener("keypress", (e) => {
            if (e.key === "Enter") {
                document.getElementById("goBtn").click();
            }
        });
    </script>
}
else
{
    <div class="chat-container">
        <div class="chat-header">
            <div class="avatar">
                @(ViewBag.ReceiverName?.ToString().Substring(0, 1).ToUpper() ?? "U")
            </div>
            <div class="user-info">
                <h3>@ViewBag.ReceiverName</h3>
                <p><span class="online-dot"></span>Online</p>
            </div>
        </div>

        <div class="messages-container" id="messagesContainer">
            <div class="empty-state" id="emptyState">
                <i class="bi bi-chat-text"></i>
                <p>No messages yet. Start the conversation!</p>
            </div>
        </div>

        <div class="chat-input-container">
            <input type="text" id="messageInput" placeholder="Type a message..." />
            <button class="send-button" id="sendBtn">
                <i class="bi bi-send-fill"></i>
            </button>
        </div>
    </div>

    @section Scripts {
        <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>
        <script>
            const receiverId = "@ViewBag.ReceiverId";
            const currentUserId = "@ViewBag.CurrentUserId";
            const receiverName = "@ViewBag.ReceiverName";
            const messagesContainer = document.getElementById("messagesContainer");
            const emptyState = document.getElementById("emptyState");
            
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/chatHub")
                .build();

            function scrollToBottom() {
                requestAnimationFrame(() => {
                    messagesContainer.scrollTop = messagesContainer.scrollHeight;
                });
            }

            function getInitials(name) {
                return name ? name.substring(0, 1).toUpperCase() : 'U';
            }

            function formatTime(date) {
                const now = new Date();
                const messageDate = new Date(date);
                const diff = now - messageDate;
                const minutes = Math.floor(diff / 60000);
                
                if (minutes < 1) return 'Just now';
                if (minutes < 60) return `${minutes}m ago`;
                
                const hours = Math.floor(minutes / 60);
                if (hours < 24) return `${hours}h ago`;
                
                return messageDate.toLocaleDateString();
            }

            function addMessage(senderId, message, timestamp = new Date()) {
                if (emptyState.style.display !== 'none') {
                    emptyState.style.display = 'none';
                }

                const messageDiv = document.createElement('div');
                const isSent = senderId === currentUserId;
                messageDiv.className = `message ${isSent ? 'sent' : 'received'}`;
                
                const avatarInitial = isSent ? '@(User.Identity.Name?.Substring(0, 1).ToUpper() ?? "Y")' : getInitials(receiverName);
                
                messageDiv.innerHTML = `
                    <div class="avatar-small">${avatarInitial}</div>
                    <div class="message-content">
                        <div class="message-bubble">
                            ${escapeHtml(message)}
                        </div>
                        <div class="message-time">
                            ${formatTime(timestamp)}
                        </div>
                    </div>
                `;
                
                messagesContainer.appendChild(messageDiv);
                scrollToBottom();
            }

            function escapeHtml(text) {
                const div = document.createElement('div');
                div.textContent = text;
                return div.innerHTML;
            }

            connection.on("ReceiveMessage", (sender, message) => {
                addMessage(sender, message);
            });

            connection.on("LoadChatHistory", (messages) => {
                messagesContainer.innerHTML = "";
                
                if (messages && messages.length > 0) {
                    messages.forEach(msg => {
                        const messageDiv = document.createElement('div');
                        const isSent = msg.senderId === currentUserId;
                        messageDiv.className = `message ${isSent ? 'sent' : 'received'}`;
                        
                        const avatarInitial = isSent ? '@(User.Identity.Name?.Substring(0, 1).ToUpper() ?? "Y")' : getInitials(receiverName);
                        
                        messageDiv.innerHTML = `
                            <div class="avatar-small">${avatarInitial}</div>
                            <div class="message-content">
                                <div class="message-bubble">
                                    ${escapeHtml(msg.message)}
                                </div>
                                <div class="message-time">
                                    ${formatTime(msg.sentAt || new Date())}
                                </div>
                            </div>
                        `;
                        
                        messagesContainer.appendChild(messageDiv);
                    });
                    scrollToBottom();
                } else {
                    const emptyStateDiv = document.createElement('div');
                    emptyStateDiv.className = 'empty-state';
                    emptyStateDiv.id = 'emptyState';
                    emptyStateDiv.innerHTML = `
                        <i class="bi bi-chat-text"></i>
                        <p>No messages yet. Start the conversation!</p>
                    `;
                    messagesContainer.appendChild(emptyStateDiv);
                }
            });

            connection.start().then(async () => {
                console.log("Connected to chat");
                await connection.invoke("LoadChatMessages", receiverId);
            }).catch(err => console.error("Connection error:", err));

            function sendMessage() {
                const input = document.getElementById("messageInput");
                const message = input.value.trim();
                
                if (message) {
                    connection.invoke("SendPrivateMessage", receiverId, message)
                        .catch(err => console.error("Send error:", err));
                    input.value = "";
                }
            }

            document.getElementById("sendBtn").addEventListener("click", sendMessage);
            
            document.getElementById("messageInput").addEventListener("keypress", (e) => {
                if (e.key === "Enter") {
                    e.preventDefault();
                    sendMessage();
                }
            });

            window.addEventListener('resize', () => {
                if (messagesContainer.children.length > 0) {
                    scrollToBottom();
                }
            });
        </script>
    }
}